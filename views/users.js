var express = require("express");
var router = express.Router();
const { signup ,signin} = require("../controllers/auth");
const {getAllStudents,getUserById,getAUser,getAllUsers} = require("../controllers/users")
const {checkStudentSessions} = require("../controllers/session")
const swaggerUI = require("swagger-ui-express")

const {checkAccess} = require("../controllers/auth")


// middleware
router.param("userId" , getUserById )

/**
*   @swagger
*    components:
*      schemas:
*        Register:
*          type: object
*          required:
*            - name
*            - email
*            - password
*            - role
*          properties:
*            role:
*              type: integer
*              description: Enter role as 1 if you are an instructor and 0 if you are a student
*            name:
*              type: string
*              description: Enter your name.
*            email:
*              type: string
*              description: Enter email address
*            password:
*              type: string
*              description: Enter password here.
*          example:
*             role : 0
*             name : Bob
*             email : bob@gmail.com
*             password : password
*/


/**
 * @swagger
 * /api/signup:
 *   post:
 *     summary: Register here.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Register'
 *     responses:
 *        "200":
*          description: The created user.
*          content:
*             application/json:
*              schema:
*                 $ref: '#/components/schemas/Register'
*/    


router.post("/signup",signup);



/**
*   @swagger
*    components:
*      schemas:
*        Signin:
*          type: object
*          required:
*            - email
*            - password
*          properties:
*            email:
*              type: string
*              description: Enter email address
*            password:
*              type: string
*              description: The date of the record creation.
*          example:
*             email : bob@gmail.com
*             password : password
*/


/**
 * @swagger
 * /api/signin:
 *   post:
 *     summary: Signin here.
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Signin'
 *     responses:
 *        "200":
*          description: Successfully Signed in.
*          content:
*             application/json:
*              schema:
*                 $ref: '#/components/schemas/Signin'
*/ 









router.post( "/signin", signin  );

/**
 * @swagger
 * /api/getallstudents:
 *   get:
 *     summary: Retrieve a list of JSONPlaceholder users.
 *     description: Retrieve a list of users from JSONPlaceholder. Can be used to populate a list of fake users when prototyping or testing an API.
 *     responses:
 *       200:
 *         description: all users detail.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                   type: array
 *                   items:
 *                     type: object
 *                     properties:
 *                       name:
 *                         type: string
 *                         description: student name.
 *                         example: Rob
 *                       email:
 *                         type: string
 *                         description: The student's name.
 *                         example: rob@gmail.com
 */

router.get("/getallstudents",getAllStudents)


/**
 * @swagger
 * /api/getauser/{userId}:
 *   get:
 *     summary: Retrieve a single JSONPlaceholder user.
 *     description: Retrieve a single JSONPlaceholder user. Can be used to populate a user profile when prototyping or testing an API.
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         description: Numeric userId of the user to retrieve.
 *         schema:
 *           type: string
  *     responses:
 *       200:
 *         description: A list of students.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                     type: object
 *                     properties:
 *                       role:
 *                         type: integer
 *                         description: user's role 1 if instructor and 0 if student.
 *                         example: 0
 *                       _id:
 *                         type: string
 *                         description: Id generated by mongoDB.
 *                         example: 609ec4b3aa111c1d3c1a016b
 *                       name:
 *                         type: string
 *                         description: user name.
 *                         example: bob
 *                       salt:
 *                         type: string
 *                         description: Secret for Security.
 *                         example: b73fd738-f22e-4d63-85f6-24259a56af76
 *                       encry_password:
 *                         type: string
 *                         description: Encrypted password.
 *                         example: e0d40a51514e20a68f14c42b4620a480ae4b6bf760c2fc026fcbfddde104a9a4
 *                       email:
 *                         type: string
 *                         description: The student's name.
 *                         example: rob@gmail.com
 *                       createdAt:
 *                         type: string                      
 *                         example: 2021-05-13T18:24:42.198Z
 *                       updatedAt:
 *                         type: string                      
 *                         example: 2021-05-14T16:22:21.198Z
 */


router.get("/getauser/:userId", getAUser)

/**
 * @swagger
 * /api/getallusers/{instructorId}:
 *   get:
 *     summary: This is a protected route which can only be accesed by the instructor by providing his Id.
 *     description: Retrieve a single JSONPlaceholder user. Can be used to populate a user profile when prototyping or testing an API.
 *     parameters:
 *       - in: path
 *         name: instructorId
 *         required: true
 *         description: Numeric userId of the user to retrieve.
 *         schema:
 *           type: string
  *     responses:
 *       200:
 *         description: A list of students.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                     type: object
 *                     properties:
 *                       role:
 *                         type: integer
 *                         description: user's role 1 if instructor and 0 if student.
 *                         example: 0
 *                       _id:
 *                         type: string
 *                         description: Id generated by mongoDB.
 *                         example: 609ec4b3aa111c1d3c1a016b
 *                       name:
 *                         type: string
 *                         description: user name.
 *                         example: bob
 *                       salt:
 *                         type: string
 *                         description: Secret for Security.
 *                         example: b73fd738-f22e-4d63-85f6-24259a56af76
 *                       encry_password:
 *                         type: string
 *                         description: Encrypted password.
 *                         example: e0d40a51514e20a68f14c42b4620a480ae4b6bf760c2fc026fcbfddde104a9a4
 *                       email:
 *                         type: string
 *                         description: The student's name.
 *                         example: rob@gmail.com
 *                       createdAt:
 *                         type: string                      
 *                         example: 2021-05-13T18:24:42.198Z
 *                       updatedAt:
 *                         type: string                      
 *                         example: 2021-05-14T16:22:21.198Z
 */




router.get("/getallusers/:userId" , checkAccess , getAllUsers )

/**
 * @swagger
 * /api/checkStudentSessions/{StudentName}:
 *   get:
 *     summary: Check all the sessions in which the student is regsitered in and corresponding instructor name.
 *     description: Retrieve a single JSONPlaceholder user. Can be used to populate a user profile when prototyping or testing an API.
 *     parameters:
 *       - in: path
 *         name: StudentName
 *         required: true
 *         description: Numeric userId of the user to retrieve.
 *         schema:
 *           type: string
  *     responses:
 *       200:
 *         description: A list of students.
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 data:
 *                     type: object
 *                     properties:
 *                       role:
 *                         type: integer
 *                         description: user's role 1 if instructor and 0 if student.
 *                         example: 0
 *                       _id:
 *                         type: string
 *                         description: Id generated by mongoDB.
 *                         example: 609ec4b3aa111c1d3c1a016b
 *                       name:
 *                         type: string
 *                         description: user name.
 *                         example: bob
 *                       salt:
 *                         type: string
 *                         description: Secret for Security.
 *                         example: b73fd738-f22e-4d63-85f6-24259a56af76
 *                       encry_password:
 *                         type: string
 *                         description: Encrypted password.
 *                         example: e0d40a51514e20a68f14c42b4620a480ae4b6bf760c2fc026fcbfddde104a9a4
 *                       email:
 *                         type: string
 *                         description: The student's name.
 *                         example: rob@gmail.com
 *                       createdAt:
 *                         type: string                      
 *                         example: 2021-05-13T18:24:42.198Z
 *                       updatedAt:
 *                         type: string                      
 *                         example: 2021-05-14T16:22:21.198Z
 */



router.get("/checkStudentSessions/:name" , checkStudentSessions );



module.exports = router;